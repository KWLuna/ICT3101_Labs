// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorLogarithmicReliability")]
    public partial class UsingCalculatorLogarithmicReliabilityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorLogarithmicReliability.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UsingCalculatorLogarithmicReliability", @"		In order to calculate the Musa Logarithmic model's failures/intensities
		As a Software Quality Metric engineer
		I want to use my calculator to do this
		// Epic:
		// - Allow Engineers to calcuate defect densite of system
		// - Implement Custom Calculation for new total of Shipped Source Insturctions (SSI)
		// - Implement Calculatation Method of Musa Log Model to calculate failure intensity and expected failures", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Failure Intensity using Logarithmic Model")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        [NUnit.Framework.TestCaseAttribute("10", "0.02", "50", "3.68", null)]
        [NUnit.Framework.TestCaseAttribute("55", "0.03", "45", "14.26", null)]
        [NUnit.Framework.TestCaseAttribute("50", "0.025", "60", "11.16", null)]
        public async System.Threading.Tasks.Task CalculatingFailureIntensityUsingLogarithmicModel(string initialIntensity, string decayParameter, string expectedFailure, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicReliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initialIntensity", initialIntensity);
            argumentsOfScenario.Add("decayParameter", decayParameter);
            argumentsOfScenario.Add("expectedFailure", expectedFailure);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating Failure Intensity using Logarithmic Model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
  await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
  await testRunner.WhenAsync(string.Format("I have entered {0} , {1}  and {2} into the calculator and press log_failure_inten" +
                            "sity", initialIntensity, decayParameter, expectedFailure), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
  await testRunner.ThenAsync(string.Format("the log reliability result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Average Expected Failure using Logarithmic Model")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        [NUnit.Framework.TestCaseAttribute("2", "0.11", "4", "5.74", null)]
        [NUnit.Framework.TestCaseAttribute("10", "0.3", "4", "8.54", null)]
        [NUnit.Framework.TestCaseAttribute("6", "0.5", "2", "3.89", null)]
        public async System.Threading.Tasks.Task CalculatingAverageExpectedFailureUsingLogarithmicModel(string initialFailure, string decayParameter, string time, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicReliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initialFailure", initialFailure);
            argumentsOfScenario.Add("decayParameter", decayParameter);
            argumentsOfScenario.Add("time", time);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating Average Expected Failure using Logarithmic Model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
  await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
  await testRunner.WhenAsync(string.Format("I have entered {0} , {1}  and {2} into the calculator and press log_average_expec" +
                            "ted_failure", initialFailure, decayParameter, time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
  await testRunner.ThenAsync(string.Format("the log reliability result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Failure Intensity using Logarithmic Model with negative input results" +
            " in error")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        [NUnit.Framework.TestCaseAttribute("0", "-11", "2", null)]
        [NUnit.Framework.TestCaseAttribute("-10", "3", "4", null)]
        [NUnit.Framework.TestCaseAttribute("5", "4", "-6", null)]
        public async System.Threading.Tasks.Task CalculatingFailureIntensityUsingLogarithmicModelWithNegativeInputResultsInError(string initialIntensity, string decayParameter, string expectedFailure, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicReliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initialIntensity", initialIntensity);
            argumentsOfScenario.Add("decayParameter", decayParameter);
            argumentsOfScenario.Add("expectedFailure", expectedFailure);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating Failure Intensity using Logarithmic Model with negative input results" +
                    " in error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
  await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
  await testRunner.WhenAsync(string.Format("I have entered {0} , {1}  and {2} into the calculator and press log_failure_inten" +
                            "sity", initialIntensity, decayParameter, expectedFailure), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
  await testRunner.ThenAsync("the log reliability result will return an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Average Expected Failure using Logarithmic Model with negative input " +
            "results in error")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        [NUnit.Framework.TestCaseAttribute("-2", "11", "4", null)]
        [NUnit.Framework.TestCaseAttribute("10", "-3", "4", null)]
        [NUnit.Framework.TestCaseAttribute("6", "5", "-2", null)]
        public async System.Threading.Tasks.Task CalculatingAverageExpectedFailureUsingLogarithmicModelWithNegativeInputResultsInError(string initialFailure, string decayParameter, string time, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicReliability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initialFailure", initialFailure);
            argumentsOfScenario.Add("decayParameter", decayParameter);
            argumentsOfScenario.Add("time", time);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating Average Expected Failure using Logarithmic Model with negative input " +
                    "results in error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 45
  await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
  await testRunner.WhenAsync(string.Format("I have entered {0} , {1}  and {2} into the calculator and press log_average_expec" +
                            "ted_failure", initialFailure, decayParameter, time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
  await testRunner.ThenAsync("the log reliability result will return an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
